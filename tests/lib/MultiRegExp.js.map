{"version":3,"sources":["../src/MultiRegExp.js"],"names":[],"mappings":"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","file":"MultiRegExp.js","sourcesContent":["/* global suite, test */\nimport assert from 'proclaim';\nimport MultiRegExp from '../../lib/MultiRegExp';\n\nsuite('Single RegExp', () => {\n    const regExp = /(hi)/g;\n    const multiRegExp = new MultiRegExp([regExp]);\n\n    test('firstMatch', () => {\n        for (let i = 0; i < 2; i++) {\n            let firstMatch = multiRegExp.firstMatch('hihi');\n\n            assert.strictEqual(firstMatch.groupCount, 1);\n            assert.strictEqual(firstMatch.start, 0);\n            assert.strictEqual(firstMatch.input, 'hihi');\n            assert.strictEqual(firstMatch.match, 'hi');\n            assert.strictEqual(firstMatch.end, 2);\n            assert.strictEqual(firstMatch.length, 1);\n            assert.strictEqual(firstMatch.group(0), 'hi');\n            assert.strictEqual(firstMatch[0], 'hi');\n            assert.strictEqual(firstMatch.group(1), 'hi');\n            assert.strictEqual(firstMatch[1], 'hi');\n        }\n    });\n\n    test('allMatches', () => {\n        const iterator = multiRegExp.allMatches('hihi');\n        const firstMatch = iterator.next();\n\n        assert.strictEqual(firstMatch.start, 0);\n        assert.strictEqual(firstMatch.match, 'hi');\n        assert.strictEqual(firstMatch.end, 2);\n        assert.strictEqual(firstMatch.group(1), 'hi');\n        assert.strictEqual(iterator._index, 2);\n\n        const secondMatch = iterator.next();\n\n        assert.strictEqual(secondMatch.start, 2);\n        assert.strictEqual(secondMatch.match, 'hi');\n        assert.strictEqual(secondMatch.end, 4);\n        assert.strictEqual(secondMatch.group(1), 'hi');\n        assert.strictEqual(iterator._index, 4);\n\n        assert.isNull(iterator.next());\n        assert.strictEqual(iterator._index, 0);\n    });\n});\n\nsuite('Two RegExp', () => {\n    const regExp1 = /(hi)/g;\n    const regExp2 = /(he)llo/g;\n    const multiRegExp = new MultiRegExp([regExp1, regExp2]);\n\n    test('firstMatch', () => {\n        for (let i = 0; i < 2; i++) {\n            let firstMatch = multiRegExp.firstMatch('hihi');\n\n            assert.strictEqual(firstMatch.groupCount, 1);\n            assert.strictEqual(firstMatch.start, 0);\n            assert.strictEqual(firstMatch.input, 'hihi');\n            assert.strictEqual(firstMatch.match, 'hi');\n            assert.strictEqual(firstMatch.end, 2);\n            assert.strictEqual(firstMatch.length, 1);\n            assert.strictEqual(firstMatch.group(0), 'hi');\n            assert.strictEqual(firstMatch.group(1), 'hi');\n        }\n    });\n\n    test('allMatches', () => {\n        const iterator = multiRegExp.allMatches('hello hi');\n        const firstMatch = iterator.next();\n\n        assert.strictEqual(firstMatch.groupCount, 1);\n        assert.strictEqual(firstMatch.start, 0);\n        assert.strictEqual(firstMatch.input, 'hello hi');\n        assert.strictEqual(firstMatch.match, 'hello');\n        assert.strictEqual(firstMatch.end, 5);\n        assert.strictEqual(firstMatch.group(1), 'he');\n\n        const secondMatch = iterator.next();\n\n        assert.strictEqual(secondMatch.start, 6);\n        assert.strictEqual(secondMatch.match, 'hi');\n        assert.strictEqual(secondMatch.end, 8);\n        assert.strictEqual(secondMatch.group(1), 'hi');\n        assert.strictEqual(iterator._index, 8);\n\n        assert.isNull(iterator.next());\n    });\n});\n"]}