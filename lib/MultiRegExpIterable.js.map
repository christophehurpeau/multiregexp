{"version":3,"sources":["../src/MultiRegExpIterable.js"],"names":[],"mappings":";;;;;;;;;;;;;;2BAAwB,eAAe;;;;2BACf,eAAe;;;;;;;;IAElB,mBAAmB;AAKzB,aALM,mBAAmB,CAKxB,WAAwB,EAAE,MAAc,EAAqB;YAAnB,KAAa,yDAAG,CAAC;;8BALtD,mBAAmB;;AAMhC,YAAI,CAAC,YAAY,GAAG,WAAW,CAAC;AAChC,YAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AACtB,YAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACvB;;iBATgB,mBAAmB;;;;;0CAehC,gBAAgB;AAChB,gBAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;;AAErE,gBAAI,KAAK,KAAK,IAAI,EAAE;AAChB,oBAAI,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;aACzE,MAAM;AACH,oBAAI,CAAC,MAAM,GAAG,CAAC,CAAC;aACnB;;AAED,gBAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AACtB,mBAAO,KAAK,CAAC;SAChB;;;;;;;;;;eAMgB,iBAAG;;;AAChB,gBAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAChB,mBAAO;AACH,oBAAI,EAAE,gBAAM;AACR,wBAAM,KAAK,GAAG,MAAK,IAAI,EAAE,CAAC;AAC1B,2BAAO;AACH,6BAAK,EAAE,KAAK,KAAK,IAAI,GAAG,SAAS,GAAG,KAAK;AACzC,4BAAI,EAAE,KAAK,KAAK,IAAI;qBACvB,CAAC;iBACL;aACJ,CAAC;SACL;;;;;+CAhCU,eAAgB;AACvB,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;WAbgB,mBAAmB;;;qBAAnB,mBAAmB","file":"MultiRegExpIterable.js","sourcesContent":["import MultiRegExp from './MultiRegExp';\nimport RegExpMatch from './RegExpMatch';\n\nexport default class MultiRegExpIterable {\n    _multiRegExp: MultiRegExp;\n    _index: number;\n    _current: RegExpMatch;\n\n    constructor(multiRegExp: MultiRegExp, string: string, start: number = 0) {\n        this._multiRegExp = multiRegExp;\n        this._string = string;\n        this._index = start;\n    }\n\n    get current(): RegExpMatch {\n        return this._current;\n    }\n\n    next(): RegExpMatch {\n        const match = this._multiRegExp.findMatch(this._string, this._index);\n\n        if (match !== null) {\n            this._index = match.start === match.end ? match.start + 1 : match.end;\n        } else {\n            this._index = 0;\n        }\n\n        this._current = match;\n        return match;\n    }\n\n    /**\n     * @method @@iterator\n     * @returns {{next: Function}}\n     */\n    [Symbol.iterator]() {\n        this._index = 0;\n        return {\n            next: () => {\n                const match = this.next();\n                return {\n                    value: match === null ? undefined : match,\n                    done: match === null,\n                };\n            },\n        };\n    }\n}\n"]}