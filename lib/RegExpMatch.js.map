{"version":3,"sources":["../src/RegExpMatch.js"],"names":[],"mappings":";;;;;;;;;;;;;;IAAqB,WAAW;AAgBjB,aAhBM,WAAW,CAgBhB,MAAM,EAAE;8BAhBH,WAAW;;AAiBxB,cAAM,CAAC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;AACxE,cAAM,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;AAC9D,cAAM,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;;AAE9D,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,mCAAsB,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SAChE;KACJ;;;;;;iBAxBgB,WAAW;;;;;;;;eAqDvB,eAAC,MAAa,4BAAU;AACzB,mBAAO,IAAI,CAAC,MAAK,CAAC,CAAC;SACtB;;;eAEgB,iBAAG;AAChB,gBAAI,CAAC,GAAG,CAAC,CAAC;AACV,mBAAO;AACH,oBAAI,EAAA,gBAAG;AACH,2BAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;iBACtD;aACJ,CAAC;SACL;;;eAEO,oBAAG;AACP,gBAAI,GAAG,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,GAAG,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC;;AAEnG,gBAAI,IAAI,CAAC,UAAU,EAAE;AACjB,qBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE;AACtC,uBAAG,IAAI,SAAS,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;iBAChD;aACJ;;AAED,mBAAO,GAAG,CAAC;SACd;;;aA/CQ,4BAAW;AAChB,mBAAO,IAAI,CAAC,CAAC,CAAC,CAAC;SAClB;;;aAEQ,4BAAW;AAChB,mBAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;aAES,4BAAW;AACjB,mBAAO,IAAI,CAAC,UAAU,CAAC;SAC1B;;;;;;;aAKM,4BAAW;AACd,mBAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;SACzC;;;WA9CgB,WAAW;;;qBAAX,WAAW","file":"RegExpMatch.js","sourcesContent":["export default class RegExpMatch {\n    /**\n     * Returns the number of captured groups in the match.\n     */\n    groupCount: number;\n\n    /**\n     * The string on which this match was computed.\n     */\n    input: string;\n\n    /**\n     * The index in the string where the match starts.\n     */\n    start: number;\n\n    constructor(result) {\n        Object.defineProperty(this, 'groupCount', { value: result.length - 1 });\n        Object.defineProperty(this, 'start', { value: result.index });\n        Object.defineProperty(this, 'input', { value: result.input });\n\n        for (let i = 0; i <= result.length; i++) {\n            Object.defineProperty(this, String(i), { value: result[i] });\n        }\n    }\n\n    /**\n     * The match of the pattern.\n     */\n    get match(): string {\n        return this[0];\n    }\n\n    get index(): number {\n        return this.start;\n    }\n\n    get length(): number {\n        return this.groupCount;\n    }\n\n    /**\n     * The index in the string after the last character of the match.\n     */\n    get end(): number {\n        return this.start + this.match.length;\n    }\n\n    /**\n     * Returns the string matched by the given group.\n     *\n     * If group is 0, returns the match of the pattern.\n     */\n    group(group: number): string {\n        return this[group];\n    }\n\n    [Symbol.iterator]() {\n        let i = 0;\n        return {\n            next() {\n                return { value: this[i], done: ++i > this.length };\n            },\n        };\n    }\n\n    toString() {\n        let str = 'match= \"' + this.match + '\", start= ' + this.start + ', groupCount= ' + this.groupCount;\n\n        if (this.groupCount) {\n            for (let i = 1; i < this.groupCount; i++) {\n                str += ', group' + i + '= \"' + this[i] + '\"';\n            }\n        }\n\n        return str;\n    }\n}\n"]}