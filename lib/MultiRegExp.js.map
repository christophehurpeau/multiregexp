{"version":3,"sources":["../src/MultiRegExp.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;2BAEwB,eAAe;;;;mCACP,uBAAuB;;;;;;IAElC,WAAW;AAGjB,aAHM,WAAW,CAGhB,QAA0B,EAAE;8BAHvB,WAAW;;AAIxB,YAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,YAAI,QAAQ,EAAE;;;;;;AACV,kDAAmB,QAAQ,4GAAE;wBAApB,MAAM;;AACX,wBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC7B;;;;;;;;;;;;;;;SACJ;KACJ;;iBAVgB,WAAW;;;;;;0CAYlB,oBAAC,MAAc,EAAe;AACpC,mBAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SACjC;;;;;;;;0CAEQ,mBAAC,MAAc,EAAkC;gBAAhC,KAAa,yDAAG,CAAC;;AACvC,gBAAI,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE;AACxB,uBAAO,IAAI,CAAC;aACf;;;;;;;AAED,mDAAmB,IAAI,CAAC,OAAO,iHAAE;wBAAxB,MAAM;;AACX,0BAAM,CAAC,SAAS,GAAG,KAAK,CAAC;iBAC5B;;;;;;;;;;;;;;;;AAED,gBAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;AAEhC,gBAAI,KAAK,KAAK,IAAI,EAAE;AAChB,uBAAO,IAAI,CAAC;aACf;;AAED,mBAAO,6BAAgB,KAAK,CAAC,CAAC;SACjC;;;;;;;;kDAES,oBAAC,MAAc,EAA0C;gBAAxC,KAAa,yDAAG,CAAC;;AACxC,mBAAO,qCAAwB,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;SACvD;;;;;;;0CAEG,cAAC,MAAc,EAAe;AAC9B,gBAAI,KAAK,YAAA;gBAAE,cAAc,YAAA,CAAC;;;;;;;AAE1B,mDAAmB,IAAI,CAAC,OAAO,iHAAE;wBAAxB,MAAM;;AACX,wBAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAChC,wBAAI,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAA,AAAC,EAAE;AACtE,6BAAK,GAAG,KAAK,CAAC;AACd,sCAAc,GAAG,MAAM,CAAC,SAAS,CAAC;qBACrC;iBACJ;;;;;;;;;;;;;;;;AAED,gBAAI,KAAK,KAAK,SAAS,EAAE;AACrB,uBAAO,IAAI,CAAC;aACf;;;;;;;AAED,mDAAmB,IAAI,CAAC,OAAO,iHAAE;wBAAxB,MAAM;;AACX,0BAAM,CAAC,SAAS,GAAG,cAAc,CAAC;iBACrC;;;;;;;;;;;;;;;;AAED,mBAAO,KAAK,CAAC;SAChB;;;;;;;sCAEG,cAAC,MAAc,EAAW;;;;;;AAC1B,mDAAmB,IAAI,CAAC,OAAO,iHAAE;wBAAxB,MAAM;;AACX,wBAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AACrB,+BAAO,IAAI,CAAC;qBACf;iBACJ;;;;;;;;;;;;;;;;AAED,mBAAO,KAAK,CAAC;SAChB;;;WApEgB,WAAW;;;qBAAX,WAAW","file":"MultiRegExp.js","sourcesContent":["/* global Iterable */\n\nimport RegExpMatch from './RegExpMatch';\nimport MultiRegExpIterable from './MultiRegExpIterable';\n\nexport default class MultiRegExp {\n    regExps: Array<RegExp>;\n\n    constructor(iterable: Iterable<RegExp>) {\n        this.regExps = [];\n        if (iterable) {\n            for (let regExp of iterable) {\n                this.regExps.push(regExp);\n            }\n        }\n    }\n\n    firstMatch(string: string): RegExpMatch {\n        return this.findMatch(string);\n    }\n\n    findMatch(string: string, start: number = 0): RegExpMatch {\n        if (start >= string.length) {\n            return null;\n        }\n\n        for (let regExp of this.regExps) {\n            regExp.lastIndex = start;\n        }\n\n        const match = this.exec(string);\n\n        if (match === null) {\n            return null;\n        }\n\n        return new RegExpMatch(match);\n    }\n\n    allMatches(string: string, start: number = 0): MultiRegExpIterable {\n        return new MultiRegExpIterable(this, string, start);\n    }\n\n    exec(string: string): RegExpMatch {\n        let found, foundLastIndex;\n\n        for (let regExp of this.regExps) {\n            let match = regExp.exec(string);\n            if (match !== null && (found === undefined || match.index < found.index)) {\n                found = match;\n                foundLastIndex = regExp.lastIndex;\n            }\n        }\n\n        if (found === undefined) {\n            return null;\n        }\n\n        for (let regExp of this.regExps) {\n            regExp.lastIndex = foundLastIndex;\n        }\n\n        return found;\n    }\n\n    test(string: string): boolean {\n        for (let regExp of this.regExps) {\n            if (regExp.test(string)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"]}